// Copyright 2019-2020 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

package s3

import (
	"context"
	"io"

	"github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

// Download provides a mock function with given fields: ctx, bucket, key
func (_m *MockClient) Download(ctx context.Context, bucket string, key string) ([]byte, error) {
	ret := _m.Called(ctx, bucket, key)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []byte); ok {
		r0 = rf(ctx, bucket, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucket, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DownloadLatest provides a mock function with given fields: ctx, bucket, prefix
func (_m *MockClient) DownloadLatest(ctx context.Context, bucket string, prefix string) ([]byte, error) {
	ret := _m.Called(ctx, bucket, prefix)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []byte); ok {
		r0 = rf(ctx, bucket, prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucket, prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upload provides a mock function with given fields: ctx, bucket, key, body, grantAccess
func (_m *MockClient) Upload(ctx context.Context, bucket string, key string, body io.Reader, grantRead string) error {
	ret := _m.Called(ctx, bucket, key, body, grantRead)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, string) error); ok {
		r0 = rf(ctx, bucket, key, body, grantRead)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DownloadLatestFolder provides a mock function with given fields: ctx, bucket, prefix
func (_m *MockClient) DownloadLatestFolder(ctx context.Context, bucket string, prefix string) ([]byte, error) {
	ret := _m.Called(ctx, bucket, prefix)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []byte); ok {
		r0 = rf(ctx, bucket, prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucket, prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
